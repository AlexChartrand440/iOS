var should = require('chai').should(),
    Hash = require('hashish'),
    yargs = require('../');

describe('usage', function () {

    describe('demand options', function () {
        describe('using .demand()', function () {
            it ('should show an error along with the missing arguments on demand fail', function () {
                var r = checkUsage(function () {
                    return yargs('-x 10 -z 20'.split(' '))
                        .usage('Usage: $0 -x NUM -y NUM')
                        .demand(['x','y'])
                        .argv;
                });
                r.result.should.have.property('x', 10);
                r.result.should.have.property('z', 20);
                r.result.should.have.property('_').with.length(0);
                r.errors.join('\n').split(/\n+/).should.deep.equal([
                    'Usage: ./usage -x NUM -y NUM',
                    'Options:',
                    '  -x  [required]',
                    '  -y  [required]',
                    'Missing required arguments: y'
                ]);
                r.logs.should.have.length(0);
                r.exit.should.be.ok;
            });

            describe('using .require()', function() {
                it ('should show an error along with the missing arguments on demand fail', function () {
                    var r = checkUsage(function () {
                        return yargs('-x 10 -z 20'.split(' '))
                            .usage('Usage: $0 -x NUM -y NUM')
                            .require(['x','y'])
                            .argv;
                    });
                    r.result.should.have.property('x', 10);
                    r.result.should.have.property('z', 20);
                    r.result.should.have.property('_').with.length(0);
                    r.errors.join('\n').split(/\n+/).should.deep.equal([
                        'Usage: ./usage -x NUM -y NUM',
                        'Options:',
                        '  -x  [required]',
                        '  -y  [required]',
                        'Missing required arguments: y'
                    ]);
                    r.logs.should.have.length(0);
                    r.exit.should.be.ok;
                });
            });
        });

        it('should show an error along with a custom message on demand fail', function () {
            var r = checkUsage(function () {
                return yargs('-z 20'.split(' '))
                    .usage('Usage: $0 -x NUM -y NUM')
                    .demand(['x','y'], 'x and y are both required to multiply all the things')
                    .argv;
            });
            r.result.should.have.property('z', 20);
            r.result.should.have.property('_').with.length(0);
            r.errors.join('\n').split(/\n+/).should.deep.equal([
                'Usage: ./usage -x NUM -y NUM',
                'Options:',
                '  -x  [required]',
                '  -y  [required]',
                'Missing required arguments: x, y',
                'x and y are both required to multiply all the things'
            ]);
            r.logs.should.have.length(0);
            r.exit.should.be.ok;
        });

        it('should return valid values when demand passes', function () {
            var r = checkUsage(function () {
                return yargs('-x 10 -y 20'.split(' '))
                    .usage('Usage: $0 -x NUM -y NUM')
                    .demand(['x','y'])
                    .argv;
            });
            r.should.have.property('result');
            r.result.should.have.property('x', 10);
            r.result.should.have.property('y', 20)
            r.result.should.have.property('_').with.length(0);
            r.should.have.property('errors').with.length(0);
            r.should.have.property('logs').with.length(0);
            r.should.have.property('exit', false);
        });
    });

    it('should return valid values when check passes', function () {
        var r = checkUsage(function () {
            return yargs('-x 10 -y 20'.split(' '))
      